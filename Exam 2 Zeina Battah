from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import classification_report, ConfusionMatrixDisplay
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pickle

# Function to preprocess data
def preprocess_data(data):
    # Drop unnecessary columns
    data = data.drop(columns=['Unnamed: 0', 'air_time', 'year', 'month', 'day', 'dest', 'dep_time'])

    # Create target columns
    data['is_delayed'] = data['dep_delay'].apply(lambda x: 1 if x >= 30 else 0)  # On-time vs Delayed
    data['delay_severity'] = data['dep_delay'].apply(lambda x: 1 if 30 <= x <= 120 else (2 if x > 120 else None))  # Minor/Major

    # Drop dep_delay to avoid leakage
    data = data.drop(columns=['dep_delay'])

    # Fill missing values
    data = data.fillna(data.median(numeric_only=True))  # Fill numeric columns with median
    categorical_cols = ['carrier', 'origin', 'type', 'manufacturer', 'model', 'engine']
    for col in categorical_cols:
        data[col] = data[col].fillna(data[col].mode()[0])  # Fill categorical columns with mode

    return data

# Load and preprocess the dataset
data = pd.read_csv('flight_data_full.csv')
data = preprocess_data(data)

# Define categorical and numerical columns
categorical_cols = ['carrier', 'origin', 'type', 'manufacturer', 'model', 'engine']
numerical_cols = ['hour', 'seats', 'carrier_delay', 'origin_delay', 'dest_delay', 'flight_volume', 'temp', 'humid']

# One-hot encode categorical columns
encoder = OneHotEncoder(handle_unknown='ignore')
encoded_cats = encoder.fit_transform(data[categorical_cols]).toarray()
encoded_cat_cols = encoder.get_feature_names_out(categorical_cols)

# Combine processed features without scaling numerical columns
X_full = pd.concat(
    [data[numerical_cols].reset_index(drop=True), pd.DataFrame(encoded_cats, columns=encoded_cat_cols).reset_index(drop=True)],
    axis=1
)

# -----------------------------
# Second Stage: Minor vs Major Delays
# -----------------------------
# Use only delayed flights predicted by the first stage
delayed_indices = (y_pred == 1)  # Flights predicted as delayed
X_test_delayed = X_test[delayed_indices]  # Features of delayed flights
y_test_delayed_actual = data.iloc[X_test_delayed.index]['delay_severity']  # True delay severity

# Prepare second stage training data
data_delayed = data[data['delay_severity'].notna()]  # Keep only delayed flights
X_delayed_full = pd.concat(
    [data_delayed[numerical_cols].reset_index(drop=True),
     pd.DataFrame(encoder.transform(data_delayed[categorical_cols]).toarray(), columns=encoded_cat_cols).reset_index(drop=True)], 
    axis=1
)
y_delayed = data_delayed['delay_severity']  # Minor (1) or Major (2)

# Split delayed data into training and testing sets for the second stage
X_train_delayed, X_test_delayed, y_train_delayed, y_test_delayed = train_test_split(
    X_delayed_full, y_delayed, test_size=0.3, random_state=42
)

# Train Decision Tree Classifier for the second stage
dt_model = DecisionTreeClassifier(random_state=42, max_depth=5, class_weight='balanced')
dt_model.fit(X_train_delayed, y_train_delayed)

# Predict and evaluate for delayed flights
y_pred_dt = dt_model.predict(X_test_delayed)

print("Second Stage: Minor vs Major Delays")
print(classification_report(y_test_delayed, y_pred_dt, target_names=['Minor Delay', 'Major Delay']))

# Plot confusion matrix for the second stage
ConfusionMatrixDisplay.from_estimator(dt_model, X_test_delayed, y_test_delayed,
                                       display_labels=['Minor Delay', 'Major Delay'], cmap=plt.cm.Blues)
plt.title("Confusion Matrix for Minor vs Major Delays")
plt.show()
