from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, ConfusionMatrixDisplay, cohen_kappa_score
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Custom scorer for GridSearch
def cohen_kappa_scorer(estimator, X, y):
    y_pred = estimator.predict(X)
    return cohen_kappa_score(y, y_pred)

# -----------------------------
# First Stage: On-time vs Delayed
# -----------------------------
# Load and preprocess the dataset
data = pd.read_csv('flight_data_full.csv')
data = data.drop(['Unnamed: 0', 'air_time', 'year', 'month', 'day', 'dest', 'dep_time'], axis=1)

# Prepare data for the first stage
x = data.drop(['dep_delay', 'delay_severity', 'is_delayed'], axis=1)
x = pd.get_dummies(x, dtype=int)  # One-hot encode categorical variables
y = data['is_delayed']

# Split data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.7, random_state=764)

# Train a Decision Tree Classifier using GridSearch
dc = DecisionTreeClassifier(class_weight='balanced')
param_grid_dc = {
    'max_depth': [None, 2, 5, 7, 10],
    'min_samples_split': [2, 3, 5, 10, 20],
    'min_impurity_decrease': [0.0, 0.01, 0.1],
    'ccp_alpha': [0.0, 0.1, 0.2, 0.5, 0.7, 1.0]
}
grid_search_dc = GridSearchCV(estimator=dc, param_grid=param_grid_dc, cv=5, n_jobs=-1, verbose=0, scoring=cohen_kappa_scorer)
grid_search_dc.fit(x_train, y_train)
best_tree = grid_search_dc.best_estimator_
print(f"Best parameters (Decision Tree): {grid_search_dc.best_params_}")

# Train the best Random Forest model using GridSearch
rf = RandomForestClassifier(class_weight='balanced', ccp_alpha=0, max_depth=None, min_samples_split=2)
param_grid_rf = {
    'n_estimators': [50, 70, 90, 100, 150, 200, 300],
    'max_features': ['auto', 'sqrt', 'log2', None]
}
grid_search_rf = GridSearchCV(estimator=rf, param_grid=param_grid_rf, cv=5, n_jobs=-1, verbose=0, scoring=cohen_kappa_scorer)
grid_search_rf.fit(x_train, y_train)
best_rf = grid_search_rf.best_estimator_
print(f"Best parameters (Random Forest): {grid_search_rf.best_params_}")

# Final Random Forest model
rf = RandomForestClassifier(class_weight='balanced', ccp_alpha=0, max_depth=None, min_samples_split=2,
                            max_features='sqrt', n_estimators=200)
rf.fit(x_train, y_train)

# Evaluate the first stage
y_pred = rf.predict(x_test)
print("First Stage: On-time vs Delayed")
print(classification_report(y_test, y_pred))

y_pred_prob = rf.predict_proba(x_test)[:, 1]
threshold = 0.15  # Adjusted threshold
y_pred_adjusted = (y_pred_prob >= threshold).astype(int)
print("Adjusted Threshold Classification Report:\n", classification_report(y_test, y_pred_adjusted))

# -----------------------------
# Second Stage: Minor vs Major Delays
# -----------------------------
# Use only delayed flights predicted by the first stage
delayed_indices = (y_pred_adjusted == 1)  # Flights predicted as delayed
x_test_delayed = x_test[delayed_indices]  # Features of delayed flights
y_test_delayed_actual = data.iloc[x_test_delayed.index]['delay_severity']  # True delay severity

# Prepare delayed data for second stage
data_delayed = data[data['delay_severity'].notna()]  # Only keep delayed flights
x_delayed = pd.get_dummies(data_delayed.drop(['dep_delay', 'delay_severity', 'is_delayed'], axis=1), dtype=int)
y_delayed = data_delayed['delay_severity']  # Minor (1) or Major (2)

# Split delayed data into training and testing sets
x_train_delayed, x_test_delayed, y_train_delayed, y_test_delayed = train_test_split(x_delayed, y_delayed, test_size=0.3, random_state=42)

# Train a Decision Tree Classifier for the second stage
dt_model = DecisionTreeClassifier(random_state=42, max_depth=5, class_weight='balanced')
dt_model.fit(x_train_delayed, y_train_delayed)

# Predict and evaluate for delayed flights
y_pred_dt = dt_model.predict(x_test_delayed)
print("Second Stage: Minor vs Major Delays")
print(classification_report(y_test_delayed, y_pred_dt, target_names=['Minor Delay', 'Major Delay']))

# Plot confusion matrix for the second stage
ConfusionMatrixDisplay.from_estimator(dt_model, x_test_delayed, y_test_delayed,
                                       display_labels=['Minor Delay', 'Major Delay'], cmap=plt.cm.Blues)
plt.title("Confusion Matrix for Minor vs Major Delays")
plt.show()
