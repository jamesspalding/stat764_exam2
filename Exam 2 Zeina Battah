from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, ConfusionMatrixDisplay
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pickle

# Function to preprocess data
def preprocess_data(data):
    # Drop unnecessary columns
    data = data.drop(columns=['Unnamed: 0', 'air_time', 'year', 'month', 'day', 'dest', 'dep_time'])

    # Create target columns
    data['is_delayed'] = data['dep_delay'].apply(lambda x: 1 if x >= 30 else 0)  # On-time vs Delayed
    data['delay_severity'] = data['dep_delay'].apply(lambda x: 1 if 30 <= x <= 120 else (2 if x > 120 else None))  # Minor/Major

    # Drop dep_delay to avoid leakage
    data = data.drop(columns=['dep_delay'])

    # Fill missing values
    data = data.fillna(data.median(numeric_only=True))  # Fill numeric columns with median
    categorical_cols = ['carrier', 'origin', 'type', 'manufacturer', 'model', 'engine']
    for col in categorical_cols:
        data[col] = data[col].fillna(data[col].mode()[0])  # Fill categorical columns with mode

    return data

# Load the dataset
data = pd.read_csv('flight_data_full.csv')
data = preprocess_data(data)

# Define categorical and numerical columns
categorical_cols = ['carrier', 'origin', 'type', 'manufacturer', 'model', 'engine']
numerical_cols = ['hour', 'seats', 'carrier_delay', 'origin_delay', 'dest_delay', 'flight_volume', 'temp', 'humid']

# Define preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_cols),  # Scale numerical columns
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)  # One-hot encode categorical columns
    ]
)

# -----------------------------
# First Stage: On-time vs Delayed
# -----------------------------

# Separate features and target
X = data.drop(columns=['is_delayed', 'delay_severity'])
y = data['is_delayed']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Define Random Forest model for first stage
rf_model = RandomForestClassifier(
    class_weight='balanced', ccp_alpha=0, max_depth=None, min_samples_split=2, max_features='sqrt', n_estimators=200, random_state=42
)

# Create a pipeline for first-stage model
pipeline_rf = Pipeline(steps=[('preprocessor', preprocessor), ('model', rf_model)])
pipeline_rf.fit(X_train, y_train)

# Evaluate first stage
y_pred_rf = pipeline_rf.predict(X_test)
y_pred_prob_rf = pipeline_rf.predict_proba(X_test)[:, 1]  # Probability for delayed class
threshold = 0.15  # Adjusted threshold
y_pred_adjusted_rf = (y_pred_prob_rf >= threshold).astype(int)  # Thresholded predictions

print("First Stage: On-time vs Delayed (Threshold Adjusted)")
print(classification_report(y_test, y_pred_adjusted_rf, target_names=['On-time', 'Delayed']))

# -----------------------------
# Second Stage: Minor vs Major Delays
# -----------------------------

# Filter for delayed flights
delayed_indices = (y_pred_adjusted_rf == 1)  # Flights predicted as delayed in the first stage
X_test_delayed = X_test[delayed_indices]  # Features of delayed flights
y_test_delayed_actual = data.iloc[X_test_delayed.index]['delay_severity']  # Actual severity labels for delayed flights

# Prepare the second-stage training data
data_delayed = data[data['delay_severity'].notna()]  # Keep only delayed flights
X_delayed = data_delayed.drop(columns=['is_delayed', 'delay_severity'])  # Drop irrelevant columns
y_delayed = data_delayed['delay_severity']  # Severity labels (1: Minor, 2: Major)

# Train-test split for the second stage
X_train_delayed, X_test_delayed, y_train_delayed, y_test_delayed = train_test_split(
    X_delayed, y_delayed, test_size=0.3, random_state=42
)

# Define Decision Tree model for second stage
dt_model = DecisionTreeClassifier(random_state=42, max_depth=5, class_weight='balanced')

# Create a pipeline for second-stage model
pipeline_dt = Pipeline(steps=[('preprocessor', preprocessor), ('model', dt_model)])
pipeline_dt.fit(X_train_delayed, y_train_delayed)

# Make predictions on delayed flights
y_pred_dt = pipeline_dt.predict(X_test_delayed)

# Evaluate second stage
print("Second Stage: Minor vs Major Delays")
print(classification_report(y_test_delayed, y_pred_dt, target_names=['Minor Delay', 'Major Delay']))

# Confusion Matrix for second stage
ConfusionMatrixDisplay.from_estimator(pipeline_dt, X_test_delayed, y_test_delayed,
                                       display_labels=['Minor Delay', 'Major Delay'], cmap=plt.cm.Blues)
plt.title("Confusion Matrix for Minor vs Major Delays")
plt.show()

# -----------------------------
# Save Models and Preprocessing Pipeline
# -----------------------------
with open('first_stage_rf.pkl', 'wb') as f:
    pickle.dump(pipeline_rf, f)
with open('second_stage_dt.pkl', 'wb') as f:
    pickle.dump(pipeline_dt, f)
